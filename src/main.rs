#![no_std]
#![no_main]
#![feature(inclusive_range_syntax)]
#![feature(asm)]
#![feature(step_by)]

#![macro_use]
extern crate stm32f7_discovery as stm32f7;
extern crate r0;
extern crate bit_field;

use stm32f7::{system_clock, sdram, lcd, board, embedded};
use lcd::Color;

#[macro_use]
mod semi_hosting;
pub mod rng;
mod graphics;


static sine_lut: [u16; 480] = [
    0x88,0x89,0x8b,0x8d,0x8f,0x90,0x92,0x94,
    0x96,0x97,0x99,0x9b,0x9d,0x9e,0xa0,0xa2,
    0xa4,0xa5,0xa7,0xa9,0xab,0xac,0xae,0xb0,
    0xb1,0xb3,0xb5,0xb6,0xb8,0xba,0xbb,0xbd,
    0xbf,0xc0,0xc2,0xc3,0xc5,0xc7,0xc8,0xca,
    0xcb,0xcd,0xce,0xd0,0xd1,0xd3,0xd4,0xd6,
    0xd7,0xd9,0xda,0xdb,0xdd,0xde,0xe0,0xe1,
    0xe2,0xe3,0xe5,0xe6,0xe7,0xe9,0xea,0xeb,
    0xec,0xed,0xef,0xf0,0xf1,0xf2,0xf3,0xf4,
    0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,
    0xfd,0xfe,0xff,0xff,0x100,0x101,0x102,0x103,
    0x103,0x104,0x105,0x105,0x106,0x107,0x107,0x108,
    0x108,0x109,0x109,0x10a,0x10a,0x10b,0x10b,0x10c,
    0x10c,0x10c,0x10d,0x10d,0x10d,0x10e,0x10e,0x10e,
    0x10e,0x10e,0x10f,0x10f,0x10f,0x10f,0x10f,0x10f,
    0x10f,0x10f,0x10f,0x10f,0x10f,0x10f,0x10f,0x10e,
    0x10e,0x10e,0x10e,0x10e,0x10d,0x10d,0x10d,0x10c,
    0x10c,0x10c,0x10b,0x10b,0x10a,0x10a,0x109,0x109,
    0x108,0x108,0x107,0x107,0x106,0x105,0x105,0x104,
    0x103,0x103,0x102,0x101,0x100,0xff,0xff,0xfe,
    0xfd,0xfc,0xfb,0xfa,0xf9,0xf8,0xf7,0xf6,
    0xf5,0xf4,0xf3,0xf2,0xf1,0xf0,0xef,0xed,
    0xec,0xeb,0xea,0xe9,0xe7,0xe6,0xe5,0xe3,
    0xe2,0xe1,0xe0,0xde,0xdd,0xdb,0xda,0xd9,
    0xd7,0xd6,0xd4,0xd3,0xd1,0xd0,0xce,0xcd,
    0xcb,0xca,0xc8,0xc7,0xc5,0xc3,0xc2,0xc0,
    0xbf,0xbd,0xbb,0xba,0xb8,0xb6,0xb5,0xb3,
    0xb1,0xb0,0xae,0xac,0xab,0xa9,0xa7,0xa5,
    0xa4,0xa2,0xa0,0x9e,0x9d,0x9b,0x99,0x97,
    0x96,0x94,0x92,0x90,0x8f,0x8d,0x8b,0x89,
    0x88,0x86,0x84,0x82,0x80,0x7f,0x7d,0x7b,
    0x79,0x78,0x76,0x74,0x72,0x71,0x6f,0x6d,
    0x6b,0x6a,0x68,0x66,0x64,0x63,0x61,0x5f,
    0x5e,0x5c,0x5a,0x59,0x57,0x55,0x54,0x52,
    0x50,0x4f,0x4d,0x4c,0x4a,0x48,0x47,0x45,
    0x44,0x42,0x41,0x3f,0x3e,0x3c,0x3b,0x39,
    0x38,0x36,0x35,0x34,0x32,0x31,0x2f,0x2e,
    0x2d,0x2c,0x2a,0x29,0x28,0x26,0x25,0x24,
    0x23,0x22,0x20,0x1f,0x1e,0x1d,0x1c,0x1b,
    0x1a,0x19,0x18,0x17,0x16,0x15,0x14,0x13,
    0x12,0x11,0x10,0x10,0xf,0xe,0xd,0xc,
    0xc,0xb,0xa,0xa,0x9,0x8,0x8,0x7,
    0x7,0x6,0x6,0x5,0x5,0x4,0x4,0x3,
    0x3,0x3,0x2,0x2,0x2,0x1,0x1,0x1,
    0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,
    0x1,0x1,0x1,0x1,0x2,0x2,0x2,0x3,
    0x3,0x3,0x4,0x4,0x5,0x5,0x6,0x6,
    0x7,0x7,0x8,0x8,0x9,0xa,0xa,0xb,
    0xc,0xc,0xd,0xe,0xf,0x10,0x10,0x11,
    0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,
    0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x22,
    0x23,0x24,0x25,0x26,0x28,0x29,0x2a,0x2c,
    0x2d,0x2e,0x2f,0x31,0x32,0x34,0x35,0x36,
    0x38,0x39,0x3b,0x3c,0x3e,0x3f,0x41,0x42,
    0x44,0x45,0x47,0x48,0x4a,0x4c,0x4d,0x4f,
    0x50,0x52,0x54,0x55,0x57,0x59,0x5a,0x5c,
    0x5e,0x5f,0x61,0x63,0x64,0x66,0x68,0x6a,
    0x6b,0x6d,0x6f,0x71,0x72,0x74,0x76,0x78,
    0x79,0x7b,0x7d,0x7f,0x80,0x82,0x84,0x86];

#[no_mangle]
pub unsafe extern "C" fn reset() -> ! {

    extern "C" {
        static __DATA_LOAD: u32;
        static __DATA_END: u32;
        static mut __DATA_START: u32;

        static mut __BSS_START: u32;
        static mut __BSS_END: u32;
    }

    let data_load = &__DATA_LOAD;
    let data_start = &mut __DATA_START;
    let data_end = &__DATA_END;

    let bss_start = &mut __BSS_START;
    let bss_end = &__BSS_END;

    // initializes the .data section (copy the data segment initializers from flash to RAM)
    r0::init_data(data_start, data_end, data_load);
    // zeroes the .bss section
    r0::zero_bss(bss_start, bss_end);

    stm32f7::heap::init();

    main(board::hw());
}


fn main(hw: board::Hardware) -> ! {

    use embedded::interfaces::gpio::{self,Gpio};

    let board::Hardware {
        rcc,
        pwr,
        flash,
        fmc,
        ltdc,
        gpio_a,
        gpio_b,
        gpio_c,
        gpio_d,
        gpio_e,
        gpio_f,
        gpio_g,
        gpio_h,
        gpio_i,
        gpio_j,
        gpio_k,
        i2c_3,
        sai_2,
        syscfg,
        ethernet_mac,
        ethernet_dma,
        ..
    } = hw;

    let mut gpio = Gpio::new(gpio_a,
                             gpio_b,
                             gpio_c,
                             gpio_d,
                             gpio_e,
                             gpio_f,
                             gpio_g,
                             gpio_h,
                             gpio_i,
                             gpio_j,
                             gpio_k);

    system_clock::init(rcc, pwr, flash);

    rcc.ahb1enr.update(|r| {

        r.set_gpioaen(true);
        r.set_gpioben(true);
        r.set_gpiocen(true);
        r.set_gpioden(true);
        r.set_gpioeen(true);
        r.set_gpiofen(true);
        r.set_gpiogen(true);
        r.set_gpiohen(true);
        r.set_gpioien(true);
        r.set_gpiojen(true);
        r.set_gpioken(true);
    });

    sdram::init(rcc, fmc, &mut gpio);
    let mut lcd = lcd::init(ltdc, rcc, &mut gpio);

    let led_pin = (gpio::Port::PortI, gpio::Pin::Pin1);

    let mut led = gpio.to_output(led_pin,
                                 gpio::OutputType::PushPull,
                                 gpio::OutputSpeed::Low,
                                 gpio::Resistor::NoPull,)
        .expect("led pin already in use");

    let mut last_toggle_ticks = system_clock::ticks();

    lcd.clear_screen();
    lcd.set_background_color(Color::from_hex(0x0));

    //let mut y = 0;
    //let mut x = 0;

    // draw the sine
    // for (x, y) in sine_lut.iter().enumerate() {
    //     lcd.print_point_at(x as u16, *y as u16);
    // }


    // draw square
    // let mut color: u16 = 0x0;
    let mut rng = rng::enable().expect("Rng already enabled");
    let mut len = 150;

    let mut counter_x = 0;
    let mut counter_y = 0;

    let random_pos_x = [1, 40, 50, 99, 150];
    let random_pos_y = [30, 25, 1, 5, 100, 120, 7];
    let colors : [u16; 8] = [0xffff, 0xcccc, 0x9999, 0x6666, 0x3333, 0x0, 0xff00, 0x00ff];
    // graphics::draw_square(1, 1, 50, 0xffff, &mut lcd);
    // graphics::draw_square(10, 10, 30, 0x0, &mut lcd);
    loop {
        let ticks = system_clock::ticks();
        if (system_clock::ticks() - last_toggle_ticks) > 200 {
            let current_led_state = led.get();
            led.set(!current_led_state);
            last_toggle_ticks = ticks;
        }

        // counter_x = (counter_x + 1) % random_pos_x.len();
        // counter_y = (counter_y + 1) % random_pos_y.len();
        // let mut x = random_pos_x[counter_x];
        // let mut y = random_pos_y[counter_y];

        // while len > 0 {
        //     graphics::draw_square(x, y, len, colors[(len as usize)  % colors.len()], &mut lcd);
        //     x += 1;
        //     y += 1;
        //     len -= 2;
        // }
        // len = 150;

        println!("Loop executed");
        let data = rng.poll_and_get();

        match data {

            Ok(random_dat) => {
                if let Some(random_dat) = random_dat {
                    println!("Rng obtained {}", random_dat);
                }
                else
                {
                    println!("No random data");
                }
            }
            Err(s) => {
                println!("Err while polling: {:?}", s);
            }
        }


        system_clock::wait(300);
        // lcd.clear_screen();
    }
}
